Notes:   https://www.youtube.com/watch?v=FYXpOjwYzcs
Code: github.com/jfairbank/fp-basics-in-es6
Slides: bit.ly/scs-fp-basics

Functional Progrraming is predictable
 - Pure Functions
 - Declarative values
 - Immutable state // proctects error even from typos
 - Transparent
 - modular - functions as building blocks // includes currying
 - Easy to test

 Pure function
 - produce the same results every time
 - easy to test inputs and out puts

 Immpure function
 - States are changing
 - un expected results

 Immutable
 - create state, Dont mutate it
 - object.freeze ... stops data from changing
        Reference  https://immutable-js.github.io/immutable-js/docs/#/
- its safe 
- good with Redux ... it creates states... it creates free redo and undo logs
- less memory usuage .. in certian casses
- 

cons of Immutable
verbose 
more object createion ... leaves data exposed
more garbage collection
more memory usuage

First Class functions 
What is a first class function?
List examples


What functional programming isn't
Before we talk about what functional programming is, let's talk about what it is not. 
 Infact, let's talk about all the language constructs you should throw out (goodbye, old friends):


#Loops
-while
-do...while
-for
-for...of
-for...in
#Variable declarations with var or let
#Void functions
#Object mutation (for example: o.x = 5;)
#Array mutator methods
-copyWithin
-fill
-pop
-push
-reverse
-shift
-sort
-splice
-unshift
#Map mutator methods
-clear
-delete
-set
#Set mutator methods
-add
-clear
-delete
